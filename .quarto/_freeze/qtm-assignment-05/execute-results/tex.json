{
  "hash": "699f6a5165be6f5eae086e2da0139f5b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"qtm-assignment-05\"\nauthor: \"Laura Zang\"\ndate: \"2025-10-06\"\nformat:\n  html: default\n  pdf: default\njupyter: qtm350-venv\neditor: visual  \n\n---\n\n## Load Dataset\n\n#| include: false\nimport pandas as pd\nimport wbgapi as wb\n\n# Example: Download a World Bank indicator\n# GDP per capita (current US$) for 2015â€“2023\ndf = wb.data.DataFrame('NY.GDP.PCAP.CD', time=range(2015, 2024))\n\n# Reset index for easier viewing\ndf = df.reset_index()\n\n# Display the first few rows\ndf.head()\n\n# Define the indicators to download\nindicators = {\n    'gdp_per_capita': 'NY.GDP.PCAP.CD',\n    'gdp_growth_rate': 'NY.GDP.MKTP.KD.ZG',\n    'inflation_rate': 'FP.CPI.TOTL.ZG',\n    'unemployment_rate': 'SL.UEM.TOTL.ZS',\n    'total_population': 'SP.POP.TOTL',\n    'life_expectancy': 'SP.DYN.LE00.IN',\n    'adult_literacy_rate': 'SE.ADT.LITR.ZS',\n    'income_inequality': 'SI.POV.GINI',\n    'health_expenditure_gdp_share': 'SH.XPD.CHEX.GD.ZS',\n    'measles_immunisation_rate': 'SH.IMM.MEAS',\n    'education_expenditure_gdp_share': 'SE.XPD.TOTL.GD.ZS',\n    'primary_school_enrolment_rate': 'SE.PRM.ENRR',\n    'exports_gdp_share': 'NE.EXP.GNFS.ZS'\n}\n\n# Get the list of country codes for the \"World\" region\ncountry_codes = wb.region.members('WLD')\n\n# Download data for countries only in 2022\ndf = wb.data.DataFrame(indicators.values(), economy=country_codes, time=2022, skipBlanks=True, labels=True).reset_index()\n\n# Delete the 'economy' column\ndf = df.drop(columns=['economy'], errors='ignore')\n\n# Create a reversed dictionary mapping indicator codes to names\n# Rename the columns and convert all names to lowercase\ndf.rename(columns=lambda x: {v: k for k, v in indicators.items()}.get(x, x).lower(), inplace=True)\n\n# Sort 'country' in ascending order\ndf = df.sort_values('country', ascending=True)\n\n# Reset the index after sorting\ndf = df.reset_index(drop=True)\n\n# Display the number of rows and columns\nprint(df.shape)\n\n# Display the first few rows of the data\nprint(df.head(3))\n\n# Save the data to a CSV file\ndf.to_csv('wdi.csv', index=False)\n\n",
    "supporting": [
      "qtm-assignment-05_files/figure-pdf"
    ],
    "filters": []
  }
}